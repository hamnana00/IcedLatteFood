Index: icedLatteFood/icedlatte/src/main/java/icedLatteFood/dominio/controladores/GestorClientes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package dominio.controladores;\r\n\r\nimport java.util.*;\r\n\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.ModelAttribute;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport icedLatteFood.dominio.entidades.CodigoPostal;\r\nimport icedLatteFood.dominio.entidades.Direccion;\r\nimport icedLatteFood.dominio.entidades.Restaurante;\r\nimport icedLatteFood.dominio.entidades.Cliente;\r\nimport icedLatteFood.servicios.DataBaseService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport icedLatteFood.*;\r\n\r\n@Controller\r\npublic class GestorClientes {\r\n/*\r\n    @Autowired\r\n    private DataBaseService dataBaseService;\r\n\r\n    private icedLatteFood.persistencia.RestauranteDAO restauranteDAO;\r\n    private icedLatteFood.persistencia.ClienteDAO clienteDAO;\r\n\r\n    //@Autowired\r\n    //private ClienteDAO clienteDAO;\r\n    // Constructor que recibe el DAO de restaurantes\r\n    public GestorClientes(icedLatteFood.persistencia.RestauranteDAO restauranteDAO, icedLatteFood.persistencia.ClienteDAO clienteDAO) {\r\n        this.restauranteDAO = restauranteDAO;\r\n        this.clienteDAO = clienteDAO;\r\n    }\r\n\r\n    // Buscar restaurante por zona (código postal)\r\n    public List<icedLatteFood.dominio.entidades.Restaurante> buscarRestaurante(CodigoPostal codigoPostal, String textoBusqueda) {\r\n        return restauranteDAO.selectPorCodigoPostal(codigoPostal.getCodigo());\r\n    }\r\n\r\n    //Buscar restaurante solo por cadena de búsqueda\r\n    public List<icedLatteFood.dominio.entidades.Restaurante> buscarRestauranteCadena(String cadenaBusqueda) {\r\n        return restauranteDAO.selectPorNombre(cadenaBusqueda);\r\n    }\r\n    // Añadir un restaurante a la lista de favoritos de un cliente\r\n    public void favorito(icedLatteFood.dominio.entidades.Cliente cliente, icedLatteFood.dominio.entidades.Restaurante restaurante) {\r\n        if (cliente != null && restaurante != null) {\r\n            cliente.anadirFavorito(restaurante);  // Añade el restaurante a los favoritos del cliente\r\n        } else {\r\n            throw new IllegalArgumentException(\"El cliente o el restaurante no pueden ser nulos\");\r\n        }\r\n    }\r\n\r\n    // Registrar un nuevo cliente\r\n    public icedLatteFood.dominio.entidades.Cliente registrarCliente(String pass, String nombre, String apellido, Direccion direccion) {\r\n        // Crear un nuevo cliente temporal sin ID\r\n        icedLatteFood.dominio.entidades.Cliente cliente = new icedLatteFood.dominio.entidades.Cliente(pass, nombre, apellido, null); // ID temporal\r\n        cliente.anadirDireccion(direccion);  // Se añade la dirección al cliente\r\n\r\n        // Guardar el cliente en la base de datos y obtener el ID generado\r\n        int idGenerado = clienteDAO.insert(cliente); // Suponiendo que insert devuelve el ID del nuevo cliente como int\r\n        if (idGenerado > 0) {\r\n            cliente.setIdUsuario(String.valueOf(idGenerado));// Asignar el ID generado al cliente\r\n        } else {\r\n            System.out.println(\"Error al registrar el cliente.\");\r\n        }\r\n\r\n        return cliente;  // Devuelve el cliente registrado\r\n    }\r\n\r\n\r\n    // Alta de una nueva dirección para un cliente\r\n    public icedLatteFood.dominio.entidades.Direccion altaDireccion(String calle, String numero, String complemento, String codigoPostal, String municipio) {\r\n        try {\r\n            int numeroParsed = Integer.parseInt(numero);\r\n            int codigoPostalParsed = Integer.parseInt(codigoPostal);\r\n            return new icedLatteFood.dominio.entidades.Direccion(calle, numeroParsed, complemento, codigoPostalParsed, municipio);\r\n        } catch (NumberFormatException e) {\r\n            System.out.println(\"Error en los datos numéricos de la dirección: \" + e.getMessage());\r\n            return null;  // Se podría lanzar una excepción o manejar de otra forma\r\n        }\r\n    }\r\n\r\n    // Clase GestorClientes\r\n    public Restaurante obtenerRestaurantePorId(String idRestaurante) {\r\n        // Comprobar que el ID no sea nulo o vacío\r\n        if (idRestaurante == null || idRestaurante.isEmpty()) {\r\n            throw new IllegalArgumentException(\"El ID del restaurante no puede ser nulo o vacío\");\r\n        }\r\n\r\n        // Usar el DAO para obtener el restaurante\r\n        Restaurante restaurante = restauranteDAO.selectPorId(idRestaurante);\r\n\r\n        // Verificar si se encontró el restaurante\r\n        if (restaurante == null) {\r\n            System.out.println(\"No se encontró el restaurante con ID: \" + idRestaurante);\r\n            // Aquí podrías lanzar una excepción o manejar el caso de otra forma\r\n        }\r\n\r\n        return restaurante;  // Retorna el restaurante encontrado (o null si no se encontró)\r\n    }\r\n*/\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/icedLatteFood/icedlatte/src/main/java/icedLatteFood/dominio/controladores/GestorClientes.java b/icedLatteFood/icedlatte/src/main/java/icedLatteFood/dominio/controladores/GestorClientes.java
--- a/icedLatteFood/icedlatte/src/main/java/icedLatteFood/dominio/controladores/GestorClientes.java	(revision 61156f0cef1c1cd80472f9a9253e71e46cdae9cb)
+++ b/icedLatteFood/icedlatte/src/main/java/icedLatteFood/dominio/controladores/GestorClientes.java	(date 1730889601990)
@@ -1,4 +1,4 @@
-package dominio.controladores;
+package icedLatteFood.dominio.controladores;
 
 import java.util.*;
 
