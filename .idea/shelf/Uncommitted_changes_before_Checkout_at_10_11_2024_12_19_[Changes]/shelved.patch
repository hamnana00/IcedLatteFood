Index: icedLatteFood/icedlatte/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.application.name=icedlatte\r\n\r\n# Configuraci\\u00F3n de la base de datos Apache Derby\r\nspring.datasource.url=jdbc:derby:bbdd;create=true\r\n#spring.datasource.username=root\r\n#spring.datasource.password=root\r\n\r\n# Preserva los datos entre ejecuciones; la base de datos no se resetea\r\nspring.jpa.hibernate.ddl-auto=update\r\n\r\n# Muestra el c\\u00F3digo SQL de forma indentada en la consola\r\nspring.jackson.serialization.indent-output=true\r\n\r\n# Configuraci\\u00F3n de conexi\\u00F3n de base de datos\r\nspring.datasource.driver-class-name=org.apache.derby.jdbc.EmbeddedDriver\r\n\r\n# Configuraci\\u00F3n de JPA para Hibernate (ORM)\r\nspring.jpa.show-sql=true\r\nspring.jpa.properties.hibernate.format_sql=true\r\n\r\n# Cambia el dialecto de PostgreSQL a Derby\r\n#spring.jpa.database-platform=org.hibernate.dialect.DerbyTenSevenDialect\r\nspring.jpa.database-platform=org.hibernate.dialect.DerbyDialect
===================================================================
diff --git a/icedLatteFood/icedlatte/src/main/resources/application.properties b/icedLatteFood/icedlatte/src/main/resources/application.properties
--- a/icedLatteFood/icedlatte/src/main/resources/application.properties	(revision 5dbf467cf9a0a8b01818660314ac1f86ba2b38f8)
+++ b/icedLatteFood/icedlatte/src/main/resources/application.properties	(date 1731233984584)
@@ -1,23 +1,24 @@
-spring.application.name=icedlatte
+    spring.application.name=icedlatte
 
-# Configuraci\u00F3n de la base de datos Apache Derby
-spring.datasource.url=jdbc:derby:bbdd;create=true
-#spring.datasource.username=root
-#spring.datasource.password=root
+    # Configuraci\u00F3n de la base de datos Apache Derby
+    spring.datasource.url=jdbc:derby:bbdd;create=true
+    #spring.datasource.username=root
+    #spring.datasource.password=root
 
-# Preserva los datos entre ejecuciones; la base de datos no se resetea
-spring.jpa.hibernate.ddl-auto=update
+    # Preserva los datos entre ejecuciones; la base de datos no se resetea
+    spring.jpa.hibernate.ddl-auto=update
 
-# Muestra el c\u00F3digo SQL de forma indentada en la consola
-spring.jackson.serialization.indent-output=true
+    # Muestra el c\u00F3digo SQL de forma indentada en la consola
+    spring.jackson.serialization.indent-output=true
 
-# Configuraci\u00F3n de conexi\u00F3n de base de datos
-spring.datasource.driver-class-name=org.apache.derby.jdbc.EmbeddedDriver
+    # Configuraci\u00F3n de conexi\u00F3n de base de datos
+    spring.datasource.driver-class-name=org.apache.derby.jdbc.EmbeddedDriver
 
-# Configuraci\u00F3n de JPA para Hibernate (ORM)
-spring.jpa.show-sql=true
-spring.jpa.properties.hibernate.format_sql=true
+    # Configuraci\u00F3n de JPA para Hibernate (ORM)
+    spring.jpa.show-sql=true
+    spring.jpa.properties.hibernate.format_sql=true
 
-# Cambia el dialecto de PostgreSQL a Derby
-#spring.jpa.database-platform=org.hibernate.dialect.DerbyTenSevenDialect
-spring.jpa.database-platform=org.hibernate.dialect.DerbyDialect
\ No newline at end of file
+    # Cambia el dialecto de PostgreSQL a Derby
+    #spring.jpa.database-platform=org.hibernate.dialect.DerbyTenSevenDialect
+    spring.jpa.database-platform=org.hibernate.dialect.DerbyDialect
+    server.port=8081
Index: icedLatteFood/icedlatte/src/main/java/icedLatteFood/dominio/controladores/RestauranteController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package icedLatteFood.dominio.controladores;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport icedLatteFood.persistencia.RestauranteDAO;\r\nimport icedLatteFood.dominio.entidades.Restaurante;\r\n\r\n@Controller\r\npublic class RestauranteController {\r\n    private static final Logger logger = LoggerFactory.getLogger(RestauranteController.class);\r\n\r\n    @Autowired\r\n    private RestauranteDAO restauranteDAO;\r\n\r\n    @GetMapping\r\n    public ResponseEntity<List<Restaurante>> getAllRestaurantes() {\r\n        logger.info(\"Obteniendo todos los restaurantes\");\r\n        List<Restaurante> restaurantes = restauranteDAO.findAllRestaurantes();\r\n        return ResponseEntity.ok(restaurantes);\r\n    }\r\n\r\n    @GetMapping(\"/buscar\")\r\n    public List<Restaurante> buscarRestaurantes(@RequestParam(required = false) String nombre,\r\n                                                @RequestParam(required = false) String codigoPostal) {\r\n        if (nombre != null) {\r\n            return restauranteDAO.findByNombreContaining(nombre);\r\n        } else if (codigoPostal != null) {\r\n            return restauranteDAO.findByCodigoPostal(codigoPostal);\r\n        } else {\r\n            return restauranteDAO.findAll();\r\n        }\r\n    }\r\n    @PostMapping(\"/{id}/favorito\")\r\n    public ResponseEntity<Void> marcarComoFavorito(@PathVariable Long id) {\r\n        Optional<Restaurante> restauranteOptional = restauranteDAO.findById(idUsuario);\r\n        if (restauranteOptional.isPresent()) {\r\n            Restaurante restaurante = restauranteOptional.get();\r\n            restaurante.setFavorito(true);\r\n            restauranteDAO.save(restaurante);\r\n            return ResponseEntity.ok().build();\r\n        } else {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n    }\r\n\r\n}
===================================================================
diff --git a/icedLatteFood/icedlatte/src/main/java/icedLatteFood/dominio/controladores/RestauranteController.java b/icedLatteFood/icedlatte/src/main/java/icedLatteFood/dominio/controladores/RestauranteController.java
--- a/icedLatteFood/icedlatte/src/main/java/icedLatteFood/dominio/controladores/RestauranteController.java	(revision 5dbf467cf9a0a8b01818660314ac1f86ba2b38f8)
+++ b/icedLatteFood/icedlatte/src/main/java/icedLatteFood/dominio/controladores/RestauranteController.java	(date 1731108313560)
@@ -37,9 +37,10 @@
             return restauranteDAO.findAll();
         }
     }
+
     @PostMapping("/{id}/favorito")
-    public ResponseEntity<Void> marcarComoFavorito(@PathVariable Long id) {
-        Optional<Restaurante> restauranteOptional = restauranteDAO.findById(idUsuario);
+    public ResponseEntity<Void> marcarComoFavorito(@PathVariable String id) {
+        Optional<Restaurante> restauranteOptional = restauranteDAO.findById(id);
         if (restauranteOptional.isPresent()) {
             Restaurante restaurante = restauranteOptional.get();
             restaurante.setFavorito(true);
Index: icedLatteFood/icedlatte/src/main/java/icedLatteFood/presentacion/IUBusqueda.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package icedLatteFood.presentacion;\r\n\r\nimport dominio.controladores.GestorClientes;\r\nimport java.util.*;\r\nimport icedLatteFood.dominio.entidades.CodigoPostal;\r\nimport icedLatteFood.dominio.entidades.Restaurante;\r\nimport icedLatteFood.dominio.entidades.Cliente; // Importar la clase Cliente\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@Controller\r\npublic class IUBusqueda {/*\r\n\r\n    @Autowired\r\n    private GestorClientes gestorClientes;  // Instancia del gestor de clientes\r\n\r\n    public IUBusqueda(GestorClientes gestorClientes) {\r\n        this.gestorClientes = gestorClientes;\r\n    }\r\n\r\n    // Método auxiliar para encontrar el CodigoPostal basado en un número\r\n    private CodigoPostal obtenerCodigoPostalPorNumero(int numero) {\r\n        for (CodigoPostal cp : CodigoPostal.values()) {\r\n            if (cp.getCodigo() == numero) {\r\n                return cp;\r\n            }\r\n        }\r\n        return null; // Devuelve null si no se encuentra\r\n    }\r\n\r\n\r\n     * Búsqueda de restaurantes por código postal y texto de búsqueda.\r\n     * @param zona CódigoPostal del área.\r\n     * @param textoBusqueda Cadena de texto para buscar en nombre o menú.\r\n     * @return Lista de restaurantes que coinciden con los criterios.\r\n\r\n    public List<Restaurante> buscar(CodigoPostal zona, String textoBusqueda) {\r\n        return gestorClientes.buscarRestaurante(zona, textoBusqueda);\r\n    }\r\n\r\n    /**\r\n     * Marca un restaurante como favorito para el cliente actual.\r\n     * @param cliente Cliente que desea marcar el restaurante.\r\n     * @param idRestaurante ID del restaurante a marcar como favorito.\r\n\r\n    public void marcarFavorito(Cliente cliente, String idRestaurante) {\r\n        // Primero buscamos el restaurante en el sistema (puedes agregar el método en GestorClientes)\r\n        Restaurante restaurante = gestorClientes.obtenerRestaurantePorId(idRestaurante);\r\n        if (restaurante != null && cliente != null) {\r\n            gestorClientes.favorito(cliente, restaurante);\r\n        } else {\r\n            System.out.println(\"Cliente o Restaurante no encontrado.\");\r\n        }\r\n    }\r\n\r\n    // Muestra todos los restaurantes o los resultados de la búsqueda\r\n    @GetMapping(\"/restaurantes\")\r\n    public String mostrarRestaurantes(@RequestParam(value = \"zona\", required = false) String zona,\r\n                                      @RequestParam(value = \"busqueda\", required = false) String busqueda,\r\n                                      Model model) {\r\n        List<Restaurante> restaurantes;\r\n\r\n        // Condición para cargar todos o hacer la búsqueda\r\n        if ((zona != null && !zona.isEmpty()) || (busqueda != null && !busqueda.isEmpty())) {\r\n            // Convertir la zona a un número y buscar el CodigoPostal correspondiente\r\n            CodigoPostal codigoPostal = zona != null ? obtenerCodigoPostalPorNumero(Integer.parseInt(zona)) : null;\r\n            restaurantes = gestorClientes.buscarRestaurante(codigoPostal, busqueda);\r\n        } else {\r\n            // Si no tienes gestorRestaurante, usa gestorClientes u otro método para obtener todos los restaurantes\r\n            restaurantes = gestorClientes.buscarRestauranteCadena(\"\"); // Método para obtener todos\r\n        }\r\n\r\n        model.addAttribute(\"restaurantes\", restaurantes);\r\n        return \"restaurantes\"; // Llama a \"restaurantes.html\"\r\n    }*/\r\n}\r\n
===================================================================
diff --git a/icedLatteFood/icedlatte/src/main/java/icedLatteFood/presentacion/IUBusqueda.java b/icedLatteFood/icedlatte/src/main/java/icedLatteFood/presentacion/IUBusqueda.java
--- a/icedLatteFood/icedlatte/src/main/java/icedLatteFood/presentacion/IUBusqueda.java	(revision 5dbf467cf9a0a8b01818660314ac1f86ba2b38f8)
+++ b/icedLatteFood/icedlatte/src/main/java/icedLatteFood/presentacion/IUBusqueda.java	(date 1731107784929)
@@ -1,6 +1,6 @@
 package icedLatteFood.presentacion;
 
-import dominio.controladores.GestorClientes;
+import icedLatteFood.dominio.controladores.GestorClientes;
 import java.util.*;
 import icedLatteFood.dominio.entidades.CodigoPostal;
 import icedLatteFood.dominio.entidades.Restaurante;
Index: derby.log
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>----------------------------------------------------------------\r\nWed Nov 06 23:21:54 UTC 2024:\r\nBooting Derby version The Apache Software Foundation - Apache Derby - 10.16.1.1 - (1901046): instance a816c00e-0193-03c8-9f68-000006b00000 \r\non database directory memory:C:\\Users\\Zineb\\Downloads\\3º AÑO INFORMÁTICA\\PRIMER CUATRI\\ISO II\\LAB\\ProyectoI\\myDB with class loader com.intellij.database.remote.jdbc.impl.JdbcClassLoader$JdbcClassLoaderImpl@4ae82894 \r\nLoaded from file:/C:/Users/Zineb/AppData/Roaming/JetBrains/IntelliJIdea2024.2/jdbc-drivers/Apache%20Derby/10.16.1.1/org/apache/derby/derby/10.16.1.1/derby-10.16.1.1.jar\r\njava.vendor=JetBrains s.r.o.\r\njava.runtime.version=21.0.4+13-b509.17\r\nuser.dir=C:\\Users\\Zineb\\Downloads\\3º AÑO INFORMÁTICA\\PRIMER CUATRI\\ISO II\\LAB\\ProyectoI\r\nos.name=Windows 11\r\nos.arch=amd64\r\nos.version=10.0\r\nderby.system.home=null\r\nDatabase Class Loader started - derby.database.classpath=''\r\n
===================================================================
diff --git a/derby.log b/derby.log
--- a/derby.log	(revision 5dbf467cf9a0a8b01818660314ac1f86ba2b38f8)
+++ b/derby.log	(date 1731237342247)
@@ -1,10 +1,10 @@
 ----------------------------------------------------------------
-Wed Nov 06 23:21:54 UTC 2024:
-Booting Derby version The Apache Software Foundation - Apache Derby - 10.16.1.1 - (1901046): instance a816c00e-0193-03c8-9f68-000006b00000 
-on database directory memory:C:\Users\Zineb\Downloads\3º AÑO INFORMÁTICA\PRIMER CUATRI\ISO II\LAB\ProyectoI\myDB with class loader com.intellij.database.remote.jdbc.impl.JdbcClassLoader$JdbcClassLoaderImpl@4ae82894 
-Loaded from file:/C:/Users/Zineb/AppData/Roaming/JetBrains/IntelliJIdea2024.2/jdbc-drivers/Apache%20Derby/10.16.1.1/org/apache/derby/derby/10.16.1.1/derby-10.16.1.1.jar
-java.vendor=JetBrains s.r.o.
-java.runtime.version=21.0.4+13-b509.17
+Sun Nov 10 12:15:42 CET 2024:
+Booting Derby version The Apache Software Foundation - Apache Derby - 10.15.2.0 - (1873585): instance a816c00e-0193-15c9-663a-000001adfd38 
+on database directory C:\Users\Zineb\Downloads\3º AÑO INFORMÁTICA\PRIMER CUATRI\ISO II\LAB\ProyectoI\bbdd with class loader jdk.internal.loader.ClassLoaders$AppClassLoader@5a07e868 
+Loaded from file:/C:/Users/Zineb/.m2/repository/org/apache/derby/derby/10.15.2.0/derby-10.15.2.0.jar
+java.vendor=Oracle Corporation
+java.runtime.version=23.0.1+11-39
 user.dir=C:\Users\Zineb\Downloads\3º AÑO INFORMÁTICA\PRIMER CUATRI\ISO II\LAB\ProyectoI
 os.name=Windows 11
 os.arch=amd64
Index: icedLatteFood/icedlatte/src/main/java/icedLatteFood/persistencia/ClienteDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package icedLatteFood.persistencia;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\n\r\nimport icedLatteFood.dominio.entidades.Direccion;\r\nimport icedLatteFood.dominio.entidades.Restaurante;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport icedLatteFood.dominio.entidades.Cliente;\r\nimport icedLatteFood.persistencia.DatabaseConnection;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\nimport icedLatteFood.*;\r\n\r\n@Repository\r\npublic interface ClienteDAO extends JpaRepository<Cliente, String> {\r\n    List<Cliente> findAllClientes();\r\n}\r\n//public class ClienteDAO extends JpaRepository<Usuario, String> { //extender a crudRepository <nombre, log>\r\n/*public class ClienteDAO {//extends JpaRepository<Usuario, String> {\r\n\r\n    private Connection connection;\r\n\r\n    // Constructor que recibe la conexión a la base de datos\r\n    public ClienteDAO(Connection connection) {\r\n        this.connection = connection;\r\n    }\r\n\r\n    // Método para insertar un cliente\r\n    public int insert(Cliente cliente) {\r\n        String sql = \"INSERT INTO clientes (nombre, apellidos, dni) VALUES (?, ?, ?)\"; // Asegúrate de que los nombres de las columnas coincidan con tu esquema\r\n        int idGenerado = -1;\r\n\r\n        try (PreparedStatement stmt = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS)) {\r\n            stmt.setString(1, cliente.getNombre());\r\n            stmt.setString(2, cliente.getApellidos());\r\n            stmt.setString(3, cliente.getDni()); // Asumimos que tienes un campo para el DNI\r\n\r\n            // Ejecutar la inserción\r\n            int affectedRows = stmt.executeUpdate();\r\n            if (affectedRows > 0) {\r\n                try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {\r\n                    if (generatedKeys.next()) {\r\n                        idGenerado = generatedKeys.getInt(1); // Obtener el ID generado\r\n                    }\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.out.println(\"Error al insertar el cliente: \" + e.getMessage());\r\n        }\r\n\r\n        return idGenerado; // Retornar el ID generado o -1 si hubo un error\r\n    }\r\n}*/\r\n\r\n
===================================================================
diff --git a/icedLatteFood/icedlatte/src/main/java/icedLatteFood/persistencia/ClienteDAO.java b/icedLatteFood/icedlatte/src/main/java/icedLatteFood/persistencia/ClienteDAO.java
--- a/icedLatteFood/icedlatte/src/main/java/icedLatteFood/persistencia/ClienteDAO.java	(revision 5dbf467cf9a0a8b01818660314ac1f86ba2b38f8)
+++ b/icedLatteFood/icedlatte/src/main/java/icedLatteFood/persistencia/ClienteDAO.java	(date 1731107553721)
@@ -18,7 +18,6 @@
 
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
-import icedLatteFood.*;
 
 @Repository
 public interface ClienteDAO extends JpaRepository<Cliente, String> {
Index: icedLatteFood/icedlatte/src/main/java/icedLatteFood/persistencia/ItemMenuDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package icedLatteFood.persistencia;\r\n\r\nimport java.sql.*;\r\nimport java.sql.Connection;\r\nimport icedLatteFood.dominio.entidades.ItemMenu;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\nimport icedLatteFood.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n@Repository\r\npublic interface ItemMenuDAO extends JpaRepository<ItemMenu, Long> {\r\n    @Override\r\n    ItemMenu save(ItemMenu itemMenu);\r\n    @Override\r\n    Optional <ItemMenu> findById(Long id);\r\n    List<ItemMenu> findAll();\r\n    void update(ItemMenu itemMenu);\r\n    void delete(Long id);\r\n/*\r\n\r\n    public ItemMenuDAO(GestorBaseDatos gestorBD) {\r\n        super(gestorBD);\r\n    }\r\n\r\n    public boolean agregarItemMenu(int idRest, String idItem, String nombre, double precio) {\r\n        String sql = \"INSERT INTO Menu (idRest, idItem, nombre, precio) VALUES (?, ?, ?, ?)\";\r\n        try (Connection connection = icedLatteFood.persistencia.DatabaseConnection.connect();\r\n             PreparedStatement stmt = connection.prepareStatement(sql)) {\r\n            stmt.setInt(1, idRest);\r\n            stmt.setString(2, idItem);\r\n            stmt.setString(3, nombre);\r\n            stmt.setDouble(4, precio);\r\n            return stmt.executeUpdate() > 0;\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public ItemMenu obtenerItemMenu(String idItem) {\r\n        String sql = \"SELECT * FROM Menu WHERE idItem = ?\";\r\n        try (Connection connection = icedLatteFood.persistencia.DatabaseConnection.connect();\r\n             PreparedStatement stmt = connection.prepareStatement(sql)) {\r\n            stmt.setString(1, idItem);\r\n            ResultSet rs = stmt.executeQuery();\r\n            if (rs.next()) {\r\n                return new ItemMenu(\r\n                        rs.getString(\"idItem\"),\r\n                        rs.getDouble(\"precio\")\r\n                );\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public boolean actualizarItemMenu(String idItem, String nombre, double precio) {\r\n        String sql = \"UPDATE Menu SET nombre = ?, precio = ? WHERE idItem = ?\";\r\n        try (Connection connection = icedLatteFood.persistencia.DatabaseConnection.connect();\r\n             PreparedStatement stmt = connection.prepareStatement(sql)) {\r\n            stmt.setString(1, nombre);\r\n            stmt.setDouble(2, precio);\r\n            stmt.setString(3, idItem);\r\n            return stmt.executeUpdate() > 0;\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean eliminarItemMenu(String idItem) {\r\n        String sql = \"DELETE FROM Menu WHERE idItem = ?\";\r\n        try (Connection connection = icedLatteFood.persistencia.DatabaseConnection.connect();\r\n             PreparedStatement stmt = connection.prepareStatement(sql)) {\r\n            stmt.setString(1, idItem);\r\n            return stmt.executeUpdate() > 0;\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }*/\r\n\r\n\r\n}\r\n
===================================================================
diff --git a/icedLatteFood/icedlatte/src/main/java/icedLatteFood/persistencia/ItemMenuDAO.java b/icedLatteFood/icedlatte/src/main/java/icedLatteFood/persistencia/ItemMenuDAO.java
--- a/icedLatteFood/icedlatte/src/main/java/icedLatteFood/persistencia/ItemMenuDAO.java	(revision 5dbf467cf9a0a8b01818660314ac1f86ba2b38f8)
+++ b/icedLatteFood/icedlatte/src/main/java/icedLatteFood/persistencia/ItemMenuDAO.java	(date 1731107733816)
@@ -5,7 +5,7 @@
 import icedLatteFood.dominio.entidades.ItemMenu;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
-import icedLatteFood.*;
+import icedLatteFood.icedlatte.IcedlatteApplication;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Optional;
Index: icedLatteFood/icedlatte/src/main/java/icedLatteFood/persistencia/RestauranteDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package icedLatteFood.persistencia;\r\n\r\nimport icedLatteFood.dominio.entidades.Restaurante;\r\nimport icedLatteFood.dominio.entidades.Direccion;\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\nimport icedLatteFood.*;\r\n\r\n@Repository\r\npublic interface RestauranteDAO extends JpaRepository <Restaurante, String> {\r\n    List<Restaurante> findAllRestaurantes();\r\n    List<Restaurante> findByNombreContaining(String nombre);\r\n    List<Restaurante> findByCodigoPostal(String codigoPostal);\r\n}\r\n/*public interface RestauranteDAO extends JpaRepository<Restaurante, String>{\r\n\r\n    /*public RestauranteDAO(GestorBaseDatos gestorBD) {\r\n        super(gestorBD);\r\n    }\r\n\r\n    // Agregar restaurante con nombre, cif y dirección\r\n    public Restaurante obtenerRestaurante(int id) {\r\n        String sql = \"SELECT * FROM Restaurante WHERE id = ?\";\r\n        try (Connection connection = DatabaseConnection.connect();\r\n             PreparedStatement stmt = connection.prepareStatement(sql)) {\r\n            stmt.setInt(1, id);\r\n            ResultSet rs = stmt.executeQuery();\r\n            if (rs.next()) {\r\n                // Crear el objeto Direccion\r\n                Direccion direccion = new Direccion(\r\n                        rs.getString(\"calle\"),\r\n                        rs.getInt(\"numero\"),\r\n                        rs.getString(\"complemento\"),\r\n                        rs.getInt(\"codigoPostal\"),\r\n                        rs.getString(\"municipio\")\r\n                );\r\n                // Convertir \"favorito\" manualmente\r\n                boolean favorito = rs.getInt(\"favorito\") == 1; // Cambia aquí\r\n\r\n                return new Restaurante(\r\n                        rs.getString(\"pass\"),\r\n                        rs.getString(\"nombre\"),\r\n                        rs.getString(\"cif\"),\r\n                        favorito,\r\n                        direccion\r\n                );\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n    // Método para buscar restaurantes por código postal\r\n    public List<Restaurante> selectPorCodigoPostal(int codigoPostal) {\r\n        List<Restaurante> restaurantes = new ArrayList<>();\r\n        String sql = \"SELECT * FROM Restaurante WHERE codigoPostal = ?\";\r\n        try (Connection connection = DatabaseConnection.connect();\r\n             PreparedStatement stmt = connection.prepareStatement(sql)) {\r\n            stmt.setInt(1, codigoPostal);\r\n            ResultSet rs = stmt.executeQuery();\r\n            while (rs.next()) {\r\n                // Crear el objeto Direccion\r\n                Direccion direccion = new Direccion(\r\n                        rs.getString(\"calle\"),\r\n                        rs.getInt(\"numero\"),\r\n                        rs.getString(\"complemento\"),\r\n                        rs.getInt(\"codigoPostal\"),\r\n                        rs.getString(\"municipio\")\r\n                );\r\n                // Convertir \"favorito\" manualmente\r\n                boolean favorito = rs.getInt(\"favorito\") == 1; // Cambia aquí\r\n                restaurantes.add(new Restaurante(\r\n                        rs.getString(\"pass\"),\r\n                        rs.getString(\"nombre\"),\r\n                        rs.getString(\"cif\"),\r\n                        favorito,\r\n                        direccion\r\n                ));\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return restaurantes;\r\n    }\r\n\r\n    // Seleccionar todos los restaurantes\r\n    public List<Restaurante> selectAll() {\r\n        List<Restaurante> restaurantes = new ArrayList<>();\r\n        String sql = \"SELECT * FROM Restaurante\";\r\n        try (Connection connection = DatabaseConnection.connect();\r\n             Statement stmt = connection.createStatement();\r\n             ResultSet rs = stmt.executeQuery(sql)) {\r\n            while (rs.next()) {\r\n                Direccion direccion = new Direccion(\r\n                        rs.getString(\"calle\"),\r\n                        rs.getInt(\"numero\"),\r\n                        rs.getString(\"complemento\"),\r\n                        rs.getInt(\"codigoPostal\"),\r\n                        rs.getString(\"municipio\")\r\n                );\r\n                restaurantes.add(new Restaurante(\r\n                        rs.getString(\"pass\"),\r\n                        rs.getString(\"nombre\"),\r\n                        rs.getString(\"cif\"),\r\n                        rs.getBoolean(\"favorito\"),\r\n                        direccion\r\n                ));\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return restaurantes;\r\n    }\r\n\r\n    public List<Restaurante> selectPorCodigoPostalYTextoLibre(String codigoPostal, String texto) {\r\n        List<Restaurante> restaurantes = new ArrayList<>();\r\n\r\n        // Consulta SQL que busca restaurantes por código postal y texto en nombre o cif\r\n        String sql = \"SELECT * FROM Restaurante WHERE codigoPostal = ? AND (nombre LIKE ? OR cif LIKE ?)\";\r\n\r\n        try (Connection connection = DatabaseConnection.connect();\r\n             PreparedStatement stmt = connection.prepareStatement(sql)) {\r\n\r\n            // Configuración de los parámetros para la consulta\r\n            stmt.setString(1, codigoPostal); // Código postal exacto\r\n            stmt.setString(2, \"%\" + texto + \"%\"); // Búsqueda parcial en el nombre\r\n            stmt.setString(3, \"%\" + texto + \"%\"); // Búsqueda parcial en el cif\r\n\r\n            ResultSet rs = stmt.executeQuery();\r\n\r\n            while (rs.next()) {\r\n                // Crear el objeto Direccion\r\n                Direccion direccion = new Direccion(\r\n                        rs.getString(\"calle\"),\r\n                        rs.getInt(\"numero\"),\r\n                        rs.getString(\"complemento\"),\r\n                        rs.getInt(\"codigoPostal\"),\r\n                        rs.getString(\"municipio\")\r\n                );\r\n\r\n                // Convertir \"favorito\" manualmente (asumiendo que es un entero)\r\n                boolean favorito = rs.getInt(\"favorito\") == 1;\r\n\r\n                // Agregar el restaurante a la lista\r\n                restaurantes.add(new Restaurante(\r\n                        rs.getString(\"pass\"),\r\n                        rs.getString(\"nombre\"),\r\n                        rs.getString(\"cif\"),\r\n                        favorito,\r\n                        direccion\r\n                ));\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace(); // Manejo de excepciones\r\n        }\r\n\r\n        return restaurantes; // Retorna la lista de restaurantes encontrados\r\n    }\r\n\r\n\r\n    public Restaurante selectPorId(String idRestaurante) {\r\n        String sql = \"SELECT * FROM Restaurante WHERE id = ?\";\r\n        try (Connection connection = DatabaseConnection.connect();\r\n             PreparedStatement stmt = connection.prepareStatement(sql)) {\r\n            stmt.setString(1, idRestaurante);  // Asignar el ID a la consulta\r\n            ResultSet rs = stmt.executeQuery();\r\n            if (rs.next()) {\r\n                // Crear el objeto Direccion\r\n                Direccion direccion = new Direccion(\r\n                        rs.getString(\"calle\"),\r\n                        rs.getInt(\"numero\"),\r\n                        rs.getString(\"complemento\"),\r\n                        rs.getInt(\"codigoPostal\"),\r\n                        rs.getString(\"municipio\")\r\n                );\r\n                // Convertir \"favorito\" manualmente\r\n                boolean favorito = rs.getInt(\"favorito\") == 1; // Cambia aquí\r\n                return new Restaurante(\r\n                        rs.getString(\"pass\"),\r\n                        rs.getString(\"nombre\"),\r\n                        rs.getString(\"cif\"),\r\n                        favorito,\r\n                        direccion\r\n                );\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace(); // Manejo de excepciones\r\n        }\r\n        return null; // Retorna null si no se encontró el restaurante\r\n    }\r\n\r\n    public List<Restaurante> selectPorNombre(String cadenaBusqueda) {\r\n        List<Restaurante> restaurantes = new ArrayList<>();\r\n        String sql = \"SELECT * FROM Restaurante WHERE nombre LIKE ?\"; // Consulta SQL\r\n\r\n        try (Connection connection = DatabaseConnection.connect();\r\n             PreparedStatement stmt = connection.prepareStatement(sql)) {\r\n            stmt.setString(1, \"%\" + cadenaBusqueda + \"%\"); // Usar LIKE para coincidencias parciales\r\n            ResultSet rs = stmt.executeQuery();\r\n\r\n            while (rs.next()) {\r\n                // Crear el objeto Direccion\r\n                Direccion direccion = new Direccion(\r\n                        rs.getString(\"calle\"),\r\n                        rs.getInt(\"numero\"),\r\n                        rs.getString(\"complemento\"),\r\n                        rs.getInt(\"codigoPostal\"),\r\n                        rs.getString(\"municipio\")\r\n                );\r\n\r\n                // Convertir \"favorito\" manualmente\r\n                boolean favorito = rs.getInt(\"favorito\") == 1; // Cambia aquí\r\n                // Agregar el restaurante a la lista\r\n                restaurantes.add(new Restaurante(\r\n                        rs.getString(\"pass\"),\r\n                        rs.getString(\"nombre\"),\r\n                        rs.getString(\"cif\"),\r\n                        favorito,\r\n                        direccion\r\n                ));\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace(); // Manejo de excepciones\r\n        }\r\n        return restaurantes; // Retorna la lista de restaurantes encontrados\r\n    }\r\n}*/\r\n\r\n
===================================================================
diff --git a/icedLatteFood/icedlatte/src/main/java/icedLatteFood/persistencia/RestauranteDAO.java b/icedLatteFood/icedlatte/src/main/java/icedLatteFood/persistencia/RestauranteDAO.java
--- a/icedLatteFood/icedlatte/src/main/java/icedLatteFood/persistencia/RestauranteDAO.java	(revision 5dbf467cf9a0a8b01818660314ac1f86ba2b38f8)
+++ b/icedLatteFood/icedlatte/src/main/java/icedLatteFood/persistencia/RestauranteDAO.java	(date 1731107747095)
@@ -7,7 +7,7 @@
 import java.util.List;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
-import icedLatteFood.*;
+import icedLatteFood.icedlatte.IcedlatteApplication;
 
 @Repository
 public interface RestauranteDAO extends JpaRepository <Restaurante, String> {
Index: icedLatteFood/icedlatte/src/main/java/icedLatteFood/dominio/controladores/UsuarioController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package icedLatteFood.dominio.controladores;\r\n\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.ModelAttribute;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.util.Optional;\r\nimport icedLatteFood.*;\r\nimport icedLatteFood.persistencia.UsuarioDAO;\r\nimport icedLatteFood.dominio.entidades.Usuario;\r\n\r\n\r\n@Controller\r\npublic class UsuarioController {\r\n    private static final Logger logger = LoggerFactory.getLogger(UsuarioController.class);\r\n\r\n    @Autowired\r\n    private UsuarioDAO usuarioDAO;\r\n\r\n    @PostMapping(\"/registrar\")\r\n    public ResponseEntity<Usuario>  registrar(@RequestBody Usuario usuario) {\r\n        usuarioDAO.save(usuario);\r\n        return ResponseEntity.ok(usuario);\r\n    }\r\n\r\n    public ResponseEntity<Usuario> getUsuario(@PathVariable String idUsuario) {\r\n        Optional<Usuario> usuarioOptional = usuarioDAO.findById(idUsuario);\r\n        if (usuarioOptional.isPresent()) {\r\n            return ResponseEntity.ok(usuarioOptional.get());\r\n        } else {\r\n            return ResponseEntity.notFound().build();\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/{Favorito}\")\r\n    public void favorito(icedLatteFood.dominio.entidades.Cliente cliente, icedLatteFood.dominio.entidades.Restaurante restaurante) {\r\n        if (cliente != null && restaurante != null) {\r\n            cliente.anadirFavorito(restaurante);  // Añade el restaurante a los favoritos del cliente\r\n        } else {\r\n            throw new IllegalArgumentException(\"El cliente o el restaurante no pueden ser nulos\");\r\n        }\r\n    }\r\n}\r\n\r\n
===================================================================
diff --git a/icedLatteFood/icedlatte/src/main/java/icedLatteFood/dominio/controladores/UsuarioController.java b/icedLatteFood/icedlatte/src/main/java/icedLatteFood/dominio/controladores/UsuarioController.java
--- a/icedLatteFood/icedlatte/src/main/java/icedLatteFood/dominio/controladores/UsuarioController.java	(revision 5dbf467cf9a0a8b01818660314ac1f86ba2b38f8)
+++ b/icedLatteFood/icedlatte/src/main/java/icedLatteFood/dominio/controladores/UsuarioController.java	(date 1731107762549)
@@ -12,7 +12,7 @@
 import org.slf4j.LoggerFactory;
 
 import java.util.Optional;
-import icedLatteFood.*;
+import icedLatteFood.icedlatte.IcedlatteApplication;
 import icedLatteFood.persistencia.UsuarioDAO;
 import icedLatteFood.dominio.entidades.Usuario;
 
